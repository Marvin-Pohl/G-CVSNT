#define yyFlexLexer CvsLogFlexLexer

#line 4 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../build/vc9Win32/cvstree/flex_lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot-fuse/tortoisecvs/TortoiseCVS/src/cvstree/flex.skl,v 1.1 2004/07/03 16:02:48 hhonisch Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#define FLEX_DEBUG

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int TortoiseLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
static yyconst short int yy_acclist[433] =
    {   0,
       50,   50,   62,   61,   61,   61,   61,   61,   24,   61,
       24,   61,   24,   61,   24,   61,   24,   61,   24,   61,
       24,   61,   24,   61,   24,   61,   24,   61,    8,   61,
       61,   61,   11,   61,   61,   14,   61,   61,   18,   61,
       61,   61,   22,   61,   23,   61,   61,   22,   61,   22,
       61,   61,   26,   61,   61,   61,   61,   39,   61,   61,
       37,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   41,   61,   43,   61,   61,   42,   61,   61,
    16428,   45,   61,   61,   61,16428,   61,16428,   61,16432,
       49,   61,   61,   50,   61,   50,   61,   61,   52,   61,

    16435,   53,   61,   54,   61,   55,   61,   56,   61,   57,
       61,   61,16443,   60,   61,    7,    8,   10,   11,   13,
       14,   18,   22,   23,   22,   22,   26,   37,   39,   37,
       41,   43,   42,16428, 8236,   45,16428,16428,16432, 8240,
       49,   50,   50,   52,16435, 8243,   53,   54,   55,   56,
       57,16443, 8251,   58,   60,   22,   22,16428,16428,   22,
       22,16428,16428,    3,   22,   22,   28,   37,   32,   37,
    16428,16428,    3,    5,    6,   22,   22,   36,   37,   28,
       37,   32,   37,   31,   37,   30,   37,16428,16428,    4,
        5,    6,   22,   22,   29,   37,   36,   37,   31,   37,

       30,   37,16428,16428,    4,   22,   22,   25,   29,   37,
    16428,16428,    1,   22,   22,   25,   33,   37,   34,   37,
       40,16428,16428,    1,   22,   22,   27,   38,   33,   37,
       34,   37,   40,16428,16428,   22,   22,   27,   35,   37,
    16428,16428,    9,   22,   22,   35,   37,16428,16428,    2,
        9,   19,   22,   22,16428,16428,    2,   22,   22,16428,
    16428,   12,   22,   22,16428,16428,   12,   16,   22,   22,
    16428,16428,   16,   22,   22,16428,16428,   22,   22,16428,
    16428,   17,   22,   22,16428,16428,   17,   22,   22,16428,
    16428,   15,   22,   22,16428,16428,   15,   22,   22,16428,

    16428,   22,   22,16428,16428,   22,   22,16428,16428,   22,
       22,16428,16428,   22,   22,16428,16428,   22,   22,16428,
    16428,   22,   22,16428,16428,   22, 8236,16428,   22,16428,
       22,16428,   22,16428,   22,16428,   22,16428,   22,16428,
       22,16428,   20,   22,   46,16428,   22,16428,   22,16428,
       22,16428,   22,16428,   22,16428,   22,16428,   22,16428,
       22,16428,   22,16428,   22,16428,   22,16428,   22,16428,
       22,16428,   22,16428,   22,16428,   22,16428,   22,16428,
       22,16428,   22,16428,   22,16428,   22,16428,   22,16428,
       22,16428,   22,16428,   22,16428,   22,16428,   22,16428,

       22,16428,   22,16428,   22,16428,   22,16428,   22,16428,
       22,16428,   22,16428,   22,16428,   22,16428,   22,16428,
       22,16428,   22,16428,   22,16428,   21,   22, 8236,   47,
    16428,   47
    } ;

static yyconst short int yy_accept[854] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    5,    6,    7,    8,
        9,   11,   13,   15,   17,   19,   21,   23,   25,   27,
       29,   31,   32,   33,   35,   36,   38,   39,   41,   42,
       43,   45,   47,   48,   50,   52,   53,   55,   56,   57,
       58,   60,   61,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   75,   77,   78,   80,   82,   84,

       85,   87,   89,   91,   93,   94,   96,   98,   99,  102,
      104,  106,  108,  110,  112,  114,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  117,  118,  118,  119,  120,  121,  122,  123,  123,
      124,  124,  124,  125,  126,  127,  127,  128,  128,  128,
      129,  129,  130,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  132,  133,  134,  135,  136,  136,
      136,  136,  137,  138,  139,  140,  141,  141,  142,  143,
      144,  144,  146,  147,  148,  149,  150,  151,  152,  153,
      154,  154,  155,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  157,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  159,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  161,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  163,  164,
      164,  164,  164,  164,  164,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  166,  167,  167,  167,  167,  167,
      167,  167,  169,  169,  171,  171,  171,  171,  171,  171,
      171,  172,  173,  173,  173,  173,  173,  173,  174,  174,

      175,  175,  175,  176,  176,  176,  176,  177,  178,  178,
      178,  178,  178,  180,  180,  182,  182,  184,  186,  186,
      188,  188,  188,  188,  189,  190,  190,  190,  190,  191,
      191,  191,  192,  192,  192,  193,  193,  193,  193,  194,
      195,  195,  195,  195,  197,  199,  199,  199,  201,  201,
      203,  203,  203,  203,  204,  205,  205,  205,  205,  206,
      206,  206,  206,  206,  206,  206,  206,  207,  208,  209,
      209,  209,  211,  211,  211,  211,  211,  211,  211,  212,
      213,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  215,  216,  217,  217,  217,  219,  221,  221,  222,

      222,  222,  223,  224,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  226,  227,  228,  229,  231,  233,
      233,  234,  234,  234,  235,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  237,  238,  239,  241,  241,
      241,  242,  243,  243,  244,  244,  244,  244,  244,  244,
      244,  244,  245,  246,  248,  248,  248,  249,  250,  251,
      252,  252,  253,  253,  253,  253,  253,  253,  253,  253,
      254,  255,  255,  255,  256,  257,  258,  258,  258,  258,
      258,  258,  258,  259,  260,  260,  260,  261,  262,  262,
      263,  263,  263,  263,  263,  264,  265,  265,  265,  266,

      267,  267,  268,  269,  269,  269,  269,  270,  271,  271,
      271,  272,  273,  273,  274,  274,  274,  274,  275,  276,
      276,  276,  277,  278,  278,  278,  278,  278,  279,  280,
      280,  280,  281,  282,  282,  283,  283,  283,  284,  285,
      285,  285,  286,  287,  287,  288,  288,  288,  289,  290,
      290,  290,  291,  292,  293,  293,  293,  294,  295,  295,
      295,  296,  297,  298,  298,  298,  299,  300,  300,  300,
      301,  302,  302,  302,  303,  304,  304,  304,  305,  306,
      306,  306,  307,  308,  308,  308,  309,  310,  310,  310,
      311,  312,  312,  312,  313,  314,  314,  314,  315,  316,

      316,  316,  317,  318,  318,  318,  319,  320,  320,  320,
      321,  322,  322,  322,  323,  324,  324,  324,  325,  326,
      326,  326,  326,  326,  327,  327,  327,  328,  328,  329,
      329,  329,  330,  330,  330,  330,  330,  331,  331,  331,
      332,  332,  332,  333,  333,  333,  334,  334,  334,  335,
      335,  335,  336,  336,  336,  337,  337,  337,  338,  338,
      338,  339,  339,  339,  340,  340,  340,  341,  341,  341,
      342,  342,  342,  343,  343,  344,  345,  345,  346,  347,
      347,  348,  348,  349,  349,  350,  350,  351,  351,  352,
      352,  353,  353,  354,  354,  355,  355,  356,  356,  357,

      357,  358,  358,  359,  359,  360,  360,  361,  361,  362,
      362,  363,  363,  364,  364,  365,  365,  366,  366,  367,
      367,  368,  368,  369,  369,  370,  370,  371,  371,  372,
      372,  373,  373,  374,  374,  375,  375,  376,  376,  377,
      377,  378,  378,  379,  379,  380,  380,  381,  381,  382,
      382,  383,  383,  384,  384,  385,  385,  386,  386,  387,
      387,  388,  388,  389,  389,  390,  390,  391,  391,  392,
      392,  393,  393,  394,  394,  395,  395,  396,  396,  397,
      397,  398,  398,  399,  399,  400,  400,  401,  401,  402,
      402,  403,  403,  404,  404,  405,  405,  406,  406,  407,

      407,  408,  408,  409,  409,  410,  410,  411,  411,  412,
      412,  413,  413,  414,  414,  415,  415,  416,  416,  417,
      417,  418,  418,  419,  419,  420,  420,  421,  421,  422,
      422,  423,  423,  424,  424,  425,  425,  426,  426,  427,
      427,  428,  428,  429,  429,  431,  431,  432,  432,  433,
      433,  433,  433
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    7,    8,    1,
        9,    1,    1,    1,    1,    1,   10,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   11,   12,    1,    1,    1,   13,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   14,   15,   16,   17,

       18,   19,   20,   21,   22,    1,   23,   24,   25,   26,
       27,   28,    1,   29,   30,   31,   32,   33,   34,    1,
       35,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[36] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    4,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[879] =
    {   0,
        0,    4,   13,   42,    9,   17,   15,   19,   21,   28,
       37,   45,   65,   73, 1398, 1397,    0,    0,   57,   80,
      102,  130, 1410, 1409,   50,   82,   85,   89,   47,   93,
       96,   98,  108,  126, 1416, 1415, 1414, 1413,  104,  111,
      119,  132,  135,  148, 1419, 1428,  159,  163,  167, 1408,
     1428, 1390, 1400, 1386, 1396, 1395, 1394, 1384, 1375, 1382,
       33, 1405, 1376,  171, 1403,  173, 1402, 1428, 1401, 1385,
        0,  171, 1399, 1395, 1391, 1381, 1428, 1395, 1370, 1389,
     1380, 1391,  179,   55,   71,  113,  134,    7,  152,  135,
      178,  179, 1364,    0, 1428, 1389,  185,  185,  185, 1388,

      189,  194,  196, 1428, 1387,  198, 1428, 1386,  202,  203,
        0,  204,    0,    0,  208,  212,  216,  220,  224, 1378,
     1375, 1357, 1369, 1370, 1353, 1368, 1346, 1364, 1354, 1347,
      228,  230, 1348,  232,  234,  236,  238, 1428, 1352,    0,
     1369, 1365,  236, 1367, 1363, 1338, 1428, 1354, 1362,  244,
     1339, 1352,  248,  237,  247,   45,  248,  249,  250,  251,
       35,  252, 1352,    0, 1428,  258,  258, 1428, 1362, 1358,
     1354,  263,  277,  261,  271, 1428, 1359, 1428,  281, 1428,
     1358,  284,  285,  286,    0,  290,    0,    0,  290, 1428,
     1357, 1428,  294, 1354, 1335, 1339, 1330, 1339, 1337, 1319,

     1329, 1336, 1336, 1327, 1330, 1341, 1337, 1339, 1335, 1321,
     1319, 1327,  290,  293,  294,  264,  295,  296,  298,  297,
      299, 1314, 1333, 1329,  304,  317, 1318, 1314, 1305, 1318,
     1304, 1325, 1304, 1300, 1302, 1304, 1311, 1310, 1319, 1315,
     1317, 1313, 1291, 1302, 1293,  302,  305,  311, 1311,  316,
     1310,    3,  307,  317, 1300, 1309, 1305,  328,  334, 1291,
     1286, 1281, 1289, 1287,  334, 1279, 1300, 1282, 1300, 1273,
     1272, 1296, 1292, 1294, 1290, 1276, 1280, 1280,  321, 1288,
      333,  342,  334,  349, 1287,  342, 1286, 1271, 1285, 1281,
      352,  356, 1265, 1268, 1282, 1279, 1257,  361, 1267,  366,

     1261, 1253,  367, 1263, 1274, 1270, 1272, 1268, 1249, 1270,
     1253, 1266,  371,  355,  376,  360,  384,  388,  375,  392,
     1254, 1265, 1261,  395,  400, 1251, 1263, 1243,  403, 1235,
     1260,  405, 1248, 1245,  409, 1245, 1255, 1251, 1253, 1249,
     1231, 1241, 1237,  413,  417,  406,  417,  423,  422,  428,
     1224, 1247, 1243,  433,  437, 1244, 1231, 1227,  440, 1226,
     1217, 1241, 1212, 1239, 1237, 1233, 1235, 1231,  445, 1204,
     1208,  449, 1230, 1229,  431, 1228, 1228, 1224,  452,  456,
      459, 1210, 1201, 1203, 1197, 1202, 1205, 1197, 1219, 1215,
     1217, 1213,  461, 1214, 1213,  465,  469,  455,  473, 1213,

     1209,  473,  478,  478, 1193, 1185, 1189, 1199, 1199, 1182,
     1193, 1204, 1200, 1202, 1198,  483, 1428,  487,  491, 1199,
      495, 1199, 1195,  495,  499, 1185, 1195, 1194, 1170, 1174,
     1176, 1164, 1190, 1186, 1188, 1184,  502,  507, 1186, 1182,
      510,  514, 1183,  517,  380, 1158, 1170, 1160, 1164, 1179,
     1175, 1177, 1173,  522, 1175, 1171,  525,  529,  532,  534,
      445, 1428, 1176, 1156, 1147, 1150, 1145, 1168, 1164, 1166,
     1162, 1164, 1160,  537,  541,  544, 1137, 1160, 1136, 1143,
     1158, 1154, 1156, 1152, 1154, 1150,  548,  544, 1126,    0,
     1150, 1129, 1149, 1145, 1147, 1143, 1145, 1141,  552,  556,

     1118,    0,  559, 1122, 1141, 1137, 1139, 1135, 1137, 1133,
      563,  559, 1119,  568, 1110, 1133, 1129, 1131, 1127, 1129,
     1125,  568,  572, 1106, 1125, 1125, 1121, 1123, 1119, 1121,
     1117,  574,  579, 1099,  582, 1118, 1114, 1116, 1112, 1114,
     1110,  586,  582, 1111,  591, 1111, 1107, 1109, 1105, 1107,
     1103,  591,  595,  598, 1105, 1101, 1103, 1099, 1101, 1097,
      602,  598,  607, 1099, 1095, 1097, 1093, 1095, 1091,  607,
      611, 1093, 1089, 1091, 1087, 1089, 1085,  613,  618, 1087,
     1083, 1085, 1081, 1083, 1079,  620,  625, 1081, 1077, 1079,
     1075, 1077, 1073,  627,  632, 1075, 1071, 1073, 1069, 1071,

     1067,  634,  639, 1069, 1065, 1067, 1063, 1065, 1061,  641,
      646, 1063, 1059,  502, 1058, 1060, 1056,  517,  648,  650,
     1055, 1034, 1059, 1052,  655, 1051, 1030, 1055,  657, 1048,
     1038, 1046, 1025, 1050, 1043, 1033,  659, 1041, 1016, 1039,
     1038, 1013,  661, 1036, 1022, 1034, 1033, 1019,  668, 1031,
     1009, 1029, 1028, 1006,  670, 1026, 1012, 1024, 1023, 1009,
      672, 1021, 1002, 1019, 1018,  999,  679, 1016,  998, 1014,
     1013,  995,  681, 1011, 1428, 1010, 1009, 1428,  683, 1008,
     1007, 1006,  690, 1005, 1004, 1003,  692, 1002, 1001, 1000,
      694,  999,  998,  997,  701,  996,  995,  994,  703,  993,

      992,  991,  705,  990,  989,  988,  712,  987,  986,  985,
      714,  984,  983,  982,  716,  981,  980,  979,  723,  978,
      977,  976,  725,  975,  974,  973,  727,  972,  971,  970,
      734,  969,  968,  967,  736,  966,  965,  964,  738,  963,
      962,  961,  745,  958,  946,  942,  747,  939,  934,  919,
      749,  915,  911,  856,  756,  854,  853,  847,  758,  845,
      836,  834,  760,  825,  823,  814,  767,  812,  803,  801,
      769,  792,  790,  781,  771,  779,  770,  768,  778,  759,
      757,  748,  780,  746,  737,  735,  782,  726,  724,  715,
      789,  713,  704,  702,  791,  693,  691,   71,  793,  115,

      141,  149,  800,  204,  206,  267,  802,  348,  352,  391,
      804,  397,  403,  425,  811,  434,  475,  506,  813,  521,
      526,  533,  815,  548,  570,  609,  822,  616,  623,  630,
      824,  637,  647,  658,  826,  660,  833,  669,  835,  837,
     1428,  677,  844,  846, 1428,  686,  848,  855, 1428,  688,
      857, 1428,  866,  870,  874,  878,  882,  886,  890,  894,
      898,  902,  906,  910,  914,  918,  922,  926,  929,  933,
      937,  941,  945,  949,  953,  957,  961,  965
    } ;

static yyconst short int yy_def[879] =
    {   0,
      853,  853,  854,  854,  853,  853,  853,  853,  853,  853,
      853,  853,  855,  855,  853,  853,  853,  853,  853,  853,
      856,  856,  853,  853,  857,  857,  858,  858,  859,  859,
      860,  860,  861,  861,  862,  862,  853,  853,  863,  863,
      864,  864,  865,  865,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      866,  852,  852,  866,  866,  852,  852,  852,  852,  867,
      852,  852,  852,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  852,  868,  852,  852,  852,  869,  852,  852,

      869,  869,  870,  852,  852,  871,  852,  852,  872,  852,
      873,  852,  874,  875,  876,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  866,
      852,  852,  852,  866,  866,  852,  852,  852,  867,  852,
      852,  852,  852,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  852,  868,  852,  852,  869,  852,  852,  852,
      852,  852,  869,  869,  870,  852,  852,  852,  871,  852,
      852,  872,  852,  852,  873,  852,  874,  875,  876,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,

      852,  852,  852,  852,  852,  852,  852,  866,  866,  852,
      852,  852,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  852,  852,  852,  869,  869,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      866,  866,  852,  852,  852,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  852,  852,  852,  869,  869,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  866,  866,  852,  852,  852,  867,  867,
      867,  852,  867,  852,  867,  867,  867,  852,  852,  852,
      869,  869,  852,  852,  852,  852,  852,  852,  852,  852,

      852,  852,  852,  852,  852,  852,  866,  866,  852,  852,
      852,  867,  852,  867,  852,  867,  852,  852,  867,  852,
      852,  852,  852,  869,  869,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  866,  866,
      852,  852,  852,  852,  852,  867,  867,  852,  867,  852,
      852,  852,  852,  869,  869,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  866,  866,  852,  852,
      852,  852,  867,  867,  867,  852,  852,  852,  869,  869,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      866,  866,  852,  852,  852,  852,  852,  867,  852,  852,

      852,  869,  869,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  866,  866,  852,  852,  852,  852,  867,
      852,  852,  852,  869,  869,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  866,  866,  852,  852,  852,  852,
      869,  869,  852,  852,  877,  852,  852,  852,  852,  852,
      852,  866,  866,  852,  852,  852,  869,  869,  852,  852,
      877,  852,  852,  852,  852,  852,  852,  852,  852,  866,
      866,  852,  852,  869,  869,  852,  852,  852,  852,  852,
      852,  852,  866,  866,  852,  852,  869,  869,  852,  878,
      852,  852,  852,  852,  866,  866,  852,  852,  869,  869,

      852,  878,  852,  852,  852,  852,  866,  866,  852,  852,
      869,  869,  852,  852,  852,  852,  852,  866,  866,  852,
      852,  869,  869,  852,  852,  852,  852,  866,  866,  852,
      852,  869,  869,  852,  852,  852,  852,  866,  866,  852,
      852,  869,  869,  852,  852,  852,  852,  866,  866,  852,
      852,  869,  869,  852,  852,  852,  866,  866,  852,  852,
      869,  869,  852,  852,  852,  866,  866,  852,  852,  869,
      869,  852,  852,  866,  866,  852,  852,  869,  869,  852,
      852,  866,  866,  852,  852,  869,  869,  852,  852,  866,
      866,  852,  852,  869,  869,  852,  852,  866,  866,  852,

      852,  869,  869,  852,  852,  866,  866,  852,  852,  869,
      869,  852,  852,  866,  866,  852,  852,  869,  869,  852,
      852,  852,  852,  866,  852,  852,  852,  852,  869,  852,
      852,  866,  852,  852,  852,  852,  869,  852,  852,  866,
      852,  852,  869,  852,  852,  866,  852,  852,  869,  852,
      852,  866,  852,  852,  869,  852,  852,  866,  852,  852,
      869,  852,  852,  866,  852,  852,  869,  852,  852,  866,
      852,  852,  869,  852,  852,  866,  852,  852,  869,  852,
      866,  852,  869,  852,  866,  852,  869,  852,  866,  852,
      869,  852,  866,  852,  869,  852,  866,  852,  869,  852,

      866,  852,  869,  852,  866,  852,  869,  852,  866,  852,
      869,  852,  866,  852,  869,  852,  866,  852,  869,  852,
      866,  852,  869,  852,  866,  852,  869,  852,  866,  852,
      869,  852,  866,  852,  869,  852,  866,  852,  869,  852,
      866,  852,  869,  852,  866,  852,  869,  852,  866,  852,
      869,  852,  866,  852,  869,  852,  866,  852,  869,  852,
      866,  852,  869,  852,  866,  852,  869,  852,  866,  852,
      869,  852,  866,  852,  869,  852,  866,  852,  869,  852,
      866,  852,  869,  852,  866,  852,  869,  852,  866,  852,
      869,  852,  866,  852,  869,  852,  866,  852,  869,  852,

      866,  852,  869,  852,  866,  852,  869,  852,  866,  852,
      869,  852,  866,  852,  869,  852,  866,  852,  869,  852,
      866,  852,  869,  852,  866,  852,  869,  852,  866,  852,
      869,  852,  866,  852,  869,  852,  866,  852,  869,  852,
      852,  852,  866,  852,  852,  852,  869,  852,  852,  852,
      852,    0,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852
    } ;

static yyconst short int yy_nxt[1464] =
    {   0,
      852,   47,   48,   49,   47,   47,   48,   49,   47,  150,
       50,   61,   62,  150,   50,   46,   46,   64,   65,   61,
       62,   64,   65,   66,   67,   52,   53,   54,  158,   55,
       66,   67,  285,   56,  131,   57,   58,  131,   63,   68,
       69,  150,   59,   60,   46,   46,   63,   68,   69,  104,
      105,  150,   95,   96,   52,   53,   54,   97,   55,   77,
       78,  150,   56,  220,   57,   58,   70,   72,   73,  215,
       74,   59,   60,   75,   70,   72,   73,  150,   74,  802,
       79,   75,   77,   78,   95,   96,  154,   99,  100,   97,
      101,   99,  100,  102,  101,  104,  105,  102,  107,  108,

      107,  108,  155,   79,   81,   82,   46,   46,   83,  110,
       46,   46,  110,   46,   46,   84,   85,   86,   87,  150,
       88,   46,   46,  804,   89,   90,   91,  110,   46,   46,
      110,   92,   81,   82,   46,   46,   83,   46,   46,  156,
      150,  150,  116,   84,   85,   86,   87,  157,   88,  805,
       46,   46,   89,   90,   91,  116,  160,  806,  150,   92,
      117,  118,  119,  117,  117,  118,  119,  117,  117,  118,
      119,  117,  134,  120,  136,  134,  141,  136,  159,  142,
      153,  153,  153,  153,  150,  150,  166,  168,  169,  166,
      170,  168,  169,  171,  173,  161,  168,  169,  176,  177,

      180,  181,  174,  183,  184,  186,  183,  184,  186,  162,
      190,  191,  808,  193,  809,  192,  193,  117,  118,  119,
      117,  117,  118,  119,  117,  117,  118,  119,  117,  131,
      120,  131,  131,  134,  131,  134,  134,  136,  134,  136,
      136,  141,  136,  150,  142,  153,  153,  153,  153,  153,
      153,  153,  153,  150,  150,  150,  150,  150,  150,  166,
      168,  169,  166,  168,  169,  221,  214,  213,  170,  226,
      150,  171,  217,  176,  177,  810,  219,  218,  216,  168,
      169,  249,  225,  180,  181,  183,  183,  184,  183,  183,
      184,  186,  190,  191,  186,  193,  150,  192,  193,  150,

      150,  150,  150,  150,  150,  150,  168,  169,  150,  258,
      246,  150,  250,  150,  247,  252,  253,  150,  248,  168,
      169,  280,  150,  150,  286,  259,  251,  150,  279,  254,
      168,  169,  281,  291,  287,  298,  168,  169,  298,  150,
      150,  283,  292,  315,  153,  153,  315,  316,  150,  312,
      317,  317,  317,  317,  168,  169,  812,  324,  168,  169,
      813,  150,  298,  314,  325,  298,  150,  332,  335,  319,
      332,  335,  345,  345,  345,  345,  346,  315,  153,  153,
      315,  150,  462,  463,  347,  317,  317,  317,  317,  348,
      348,  348,  348,  350,  350,  350,  350,  168,  169,  814,

      354,  349,  168,  169,  359,  816,  332,  359,  355,  332,
      335,  817,  150,  335,  372,  372,  372,  372,  345,  345,
      345,  345,  373,  150,  348,  348,  348,  348,  150,  350,
      350,  350,  350,  818,  374,  168,  169,  150,  379,  168,
      169,  359,  820,  375,  359,  380,  393,  462,  463,  393,
      372,  372,  372,  372,  168,  169,  398,  402,  168,  169,
      404,  150,  393,  404,  403,  393,  418,  418,  418,  418,
      419,  419,  419,  419,  421,  168,  169,  421,  424,  404,
      168,  169,  404,  821,  437,  420,  425,  437,  418,  418,
      418,  418,  419,  419,  419,  419,  421,  168,  169,  421,

      441,  168,  169,  437,  622,  623,  437,  442,  454,  454,
      454,  454,  168,  169,  822,  457,  168,  169,  460,  627,
      628,  460,  458,  454,  454,  454,  454,  168,  169,  824,
      474,  168,  169,  476,  825,  460,  476,  475,  460,  168,
      169,  826,  487,  168,  169,  476,  168,  169,  476,  488,
      168,  169,  500,  499,  168,  169,  828,  511,  168,  169,
      514,  168,  169,  514,  512,  168,  169,  523,  522,  514,
      168,  169,  514,  532,  168,  169,  168,  169,  829,  542,
      533,  168,  169,  545,  168,  169,  545,  543,  168,  169,
      553,  552,  545,  168,  169,  545,  561,  168,  169,  563,

      168,  169,  563,  562,  168,  169,  571,  570,  563,  168,
      169,  563,  578,  168,  169,  168,  169,  830,  586,  579,
      168,  169,  168,  169,  832,  594,  587,  168,  169,  168,
      169,  833,  602,  595,  168,  169,  168,  169,  834,  610,
      603,  168,  169,  168,  169,  836,  618,  611,  168,  169,
      168,  169,  622,  623,  619,  837,  629,  633,  634,  168,
      169,  168,  169,  168,  169,  637,  838,  643,  840,  649,
      168,  169,  168,  169,  168,  169,  655,  844,  661,  841,
      667,  168,  169,  168,  169,  168,  169,  673,  845,  679,
      849,  683,  168,  169,  168,  169,  168,  169,  687,  801,

      691,  800,  695,  168,  169,  168,  169,  168,  169,  699,
      798,  703,  797,  707,  168,  169,  168,  169,  168,  169,
      711,  796,  715,  794,  719,  168,  169,  168,  169,  168,
      169,  723,  793,  727,  792,  731,  168,  169,  168,  169,
      168,  169,  735,  790,  739,  789,  743,  168,  169,  168,
      169,  168,  169,  747,  788,  751,  786,  755,  168,  169,
      168,  169,  168,  169,  759,  785,  763,  784,  767,  168,
      169,  168,  169,  168,  169,  771,  782,  775,  781,  779,
      168,  169,  168,  169,  168,  169,  783,  780,  787,  778,
      791,  168,  169,  168,  169,  168,  169,  795,  777,  799,

      776,  803,  168,  169,  168,  169,  168,  169,  807,  774,
      811,  773,  815,  168,  169,  168,  169,  168,  169,  819,
      772,  823,  770,  827,  168,  169,  168,  169,  168,  169,
      831,  769,  835,  768,  839,  841,  842,  845,  846,  841,
      842,  843,  766,  847,  765,  848,  841,  842,  849,  850,
      845,  846,  843,  764,  851,  762,  847,  841,  842,  849,
      850,  761,  760,  848,  758,  851,   46,   46,   46,   46,
       51,   51,   51,   51,   71,   71,   71,   71,   80,   80,
       80,   80,   94,   94,   94,   94,   98,   98,   98,   98,
      103,  103,  103,  103,  106,  106,  106,  106,  109,  109,

      109,  109,  111,  111,  111,  111,  113,  113,  113,  113,
      114,  114,  114,  114,  115,  115,  115,  115,  140,  757,
      140,  140,  149,  756,  149,  149,  164,  754,  164,  167,
      167,  167,  167,  175,  175,  175,  175,  179,  179,  179,
      179,  182,  753,  182,  182,  185,  185,  752,  185,  187,
      750,  187,  187,  188,  749,  188,  188,  189,  189,  189,
      189,  461,  461,  461,  461,  502,  748,  502,  502,  746,
      745,  744,  742,  741,  740,  738,  737,  736,  734,  733,
      732,  730,  729,  728,  726,  725,  724,  722,  721,  720,
      718,  717,  716,  714,  713,  712,  710,  709,  708,  706,

      705,  704,  702,  701,  700,  698,  697,  696,  694,  693,
      692,  690,  689,  688,  686,  685,  684,  682,  681,  680,
      678,  677,  676,  675,  674,  672,  671,  670,  669,  668,
      666,  665,  664,  663,  662,  660,  659,  658,  657,  656,
      654,  653,  652,  651,  650,  648,  647,  646,  645,  644,
      642,  641,  633,  636,  640,  639,  638,  627,  636,  635,
      632,  622,  631,  630,  626,  625,  624,  621,  620,  617,
      616,  615,  614,  613,  612,  609,  608,  607,  606,  605,
      604,  601,  600,  599,  598,  597,  596,  593,  592,  591,
      590,  589,  588,  585,  584,  583,  582,  581,  580,  577,

      576,  575,  574,  573,  572,  569,  568,  567,  566,  565,
      564,  560,  559,  558,  557,  556,  555,  554,  551,  550,
      549,  548,  547,  546,  544,  541,  540,  539,  538,  537,
      536,  535,  534,  531,  530,  529,  528,  527,  526,  525,
      524,  521,  520,  519,  518,  517,  516,  515,  513,  510,
      509,  508,  507,  506,  505,  504,  503,  501,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  462,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  459,
      456,  455,  453,  452,  451,  450,  449,  448,  447,  446,

      445,  444,  443,  440,  439,  438,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  423,  422,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  401,  400,  399,  397,  396,  395,  394,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  378,  377,  376,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  358,  357,  356,  353,
      352,  351,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  334,  333,  331,  330,  329,  328,  327,  326,  323,
      322,  321,  320,  318,  313,  311,  310,  309,  308,  307,

      306,  305,  304,  303,  302,  301,  300,  299,  297,  296,
      295,  294,  293,  290,  289,  288,  284,  282,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  257,  256,  255,
      245,  244,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  190,
      180,  176,  224,  223,  168,  222,  151,  212,  150,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  194,  121,  180,  178,
      172,  165,  163,  152,  151,  150,  148,  147,  146,  145,

      144,  143,  139,  138,  137,  135,  133,  132,  130,  129,
      128,  127,  126,  125,  124,  123,  122,  121,  852,  112,
      112,   46,   46,   93,   93,   76,   76,   45,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852
    } ;

static yyconst short int yy_chk[1464] =
    {   0,
        0,    1,    1,    1,    1,    2,    2,    2,    2,  252,
        1,    5,    5,   88,    2,    3,    3,    7,    7,    6,
        6,    8,    8,    9,    9,    3,    3,    3,   88,    3,
       10,   10,  252,    3,   61,    3,    3,   61,    5,   11,
       11,  161,    3,    3,    4,    4,    6,   12,   12,   29,
       29,  156,   25,   25,    4,    4,    4,   25,    4,   19,
       19,   84,    4,  161,    4,    4,   11,   13,   13,  156,
       13,    4,    4,   13,   12,   14,   14,   85,   14,  798,
       19,   14,   20,   20,   26,   26,   84,   27,   27,   26,
       27,   28,   28,   27,   28,   30,   30,   28,   31,   31,

       32,   32,   85,   20,   21,   21,   39,   39,   21,   33,
       33,   33,   33,   40,   40,   21,   21,   21,   21,   86,
       21,   41,   41,  800,   21,   21,   21,   34,   34,   34,
       34,   21,   22,   22,   42,   42,   22,   43,   43,   86,
       87,   90,   43,   22,   22,   22,   22,   87,   22,  801,
       44,   44,   22,   22,   22,   44,   90,  802,   89,   22,
       47,   47,   47,   47,   48,   48,   48,   48,   49,   49,
       49,   49,   64,   48,   66,   64,   72,   66,   89,   72,
       83,   83,   83,   83,   91,   92,   97,   98,   98,   97,
       99,  101,  101,   99,  101,   91,  102,  102,  103,  103,

      106,  106,  102,  109,  110,  112,  109,  110,  112,   92,
      115,  115,  804,  116,  805,  115,  116,  117,  117,  117,
      117,  118,  118,  118,  118,  119,  119,  119,  119,  131,
      118,  132,  131,  134,  132,  135,  134,  136,  135,  137,
      136,  143,  137,  154,  143,  150,  150,  150,  150,  153,
      153,  153,  153,  155,  157,  158,  159,  160,  162,  166,
      167,  167,  166,  174,  174,  162,  155,  154,  172,  174,
      216,  172,  158,  175,  175,  806,  160,  159,  157,  173,
      173,  216,  173,  179,  179,  182,  183,  184,  182,  183,
      184,  186,  189,  189,  186,  193,  213,  189,  193,  214,

      215,  217,  218,  220,  219,  221,  225,  225,  246,  225,
      213,  247,  217,  253,  214,  219,  220,  248,  215,  226,
      226,  247,  250,  254,  253,  226,  218,  279,  246,  221,
      258,  258,  248,  258,  254,  265,  259,  259,  265,  281,
      283,  250,  259,  282,  282,  282,  282,  283,  286,  279,
      284,  284,  284,  284,  291,  291,  808,  291,  292,  292,
      809,  314,  298,  281,  292,  298,  316,  300,  303,  286,
      300,  303,  313,  313,  313,  313,  314,  315,  315,  315,
      315,  319,  445,  445,  316,  317,  317,  317,  317,  318,
      318,  318,  318,  320,  320,  320,  320,  324,  324,  810,

      324,  319,  325,  325,  329,  812,  332,  329,  325,  332,
      335,  813,  346,  335,  344,  344,  344,  344,  345,  345,
      345,  345,  346,  347,  348,  348,  348,  348,  349,  350,
      350,  350,  350,  814,  347,  354,  354,  375,  354,  355,
      355,  359,  816,  349,  359,  355,  369,  461,  461,  369,
      372,  372,  372,  372,  379,  379,  375,  379,  380,  380,
      381,  398,  393,  381,  380,  393,  396,  396,  396,  396,
      397,  397,  397,  397,  399,  402,  402,  399,  402,  404,
      403,  403,  404,  817,  416,  398,  403,  416,  418,  418,
      418,  418,  419,  419,  419,  419,  421,  424,  424,  421,

      424,  425,  425,  437,  614,  614,  437,  425,  438,  438,
      438,  438,  441,  441,  818,  441,  442,  442,  444,  618,
      618,  444,  442,  454,  454,  454,  454,  457,  457,  820,
      457,  458,  458,  459,  821,  460,  459,  458,  460,  474,
      474,  822,  474,  475,  475,  476,  488,  488,  476,  475,
      487,  487,  488,  487,  499,  499,  824,  499,  500,  500,
      503,  512,  512,  503,  500,  511,  511,  512,  511,  514,
      522,  522,  514,  522,  523,  523,  532,  532,  825,  532,
      523,  533,  533,  535,  543,  543,  535,  533,  542,  542,
      543,  542,  545,  552,  552,  545,  552,  553,  553,  554,

      562,  562,  554,  553,  561,  561,  562,  561,  563,  570,
      570,  563,  570,  571,  571,  578,  578,  826,  578,  571,
      579,  579,  586,  586,  828,  586,  579,  587,  587,  594,
      594,  829,  594,  587,  595,  595,  602,  602,  830,  602,
      595,  603,  603,  610,  610,  832,  610,  603,  611,  611,
      619,  619,  620,  620,  611,  833,  619,  625,  625,  629,
      629,  637,  637,  643,  643,  629,  834,  637,  836,  643,
      649,  649,  655,  655,  661,  661,  649,  838,  655,  842,
      661,  667,  667,  673,  673,  679,  679,  667,  846,  673,
      850,  679,  683,  683,  687,  687,  691,  691,  683,  797,

      687,  796,  691,  695,  695,  699,  699,  703,  703,  695,
      794,  699,  793,  703,  707,  707,  711,  711,  715,  715,
      707,  792,  711,  790,  715,  719,  719,  723,  723,  727,
      727,  719,  789,  723,  788,  727,  731,  731,  735,  735,
      739,  739,  731,  786,  735,  785,  739,  743,  743,  747,
      747,  751,  751,  743,  784,  747,  782,  751,  755,  755,
      759,  759,  763,  763,  755,  781,  759,  780,  763,  767,
      767,  771,  771,  775,  775,  767,  778,  771,  777,  775,
      779,  779,  783,  783,  787,  787,  779,  776,  783,  774,
      787,  791,  791,  795,  795,  799,  799,  791,  773,  795,

      772,  799,  803,  803,  807,  807,  811,  811,  803,  770,
      807,  769,  811,  815,  815,  819,  819,  823,  823,  815,
      768,  819,  766,  823,  827,  827,  831,  831,  835,  835,
      827,  765,  831,  764,  835,  837,  837,  839,  839,  840,
      840,  837,  762,  839,  761,  840,  843,  843,  844,  844,
      847,  847,  843,  760,  844,  758,  847,  848,  848,  851,
      851,  757,  756,  848,  754,  851,  853,  853,  853,  853,
      854,  854,  854,  854,  855,  855,  855,  855,  856,  856,
      856,  856,  857,  857,  857,  857,  858,  858,  858,  858,
      859,  859,  859,  859,  860,  860,  860,  860,  861,  861,

      861,  861,  862,  862,  862,  862,  863,  863,  863,  863,
      864,  864,  864,  864,  865,  865,  865,  865,  866,  753,
      866,  866,  867,  752,  867,  867,  868,  750,  868,  869,
      869,  869,  869,  870,  870,  870,  870,  871,  871,  871,
      871,  872,  749,  872,  872,  873,  873,  748,  873,  874,
      746,  874,  874,  875,  745,  875,  875,  876,  876,  876,
      876,  877,  877,  877,  877,  878,  744,  878,  878,  742,
      741,  740,  738,  737,  736,  734,  733,  732,  730,  729,
      728,  726,  725,  724,  722,  721,  720,  718,  717,  716,
      714,  713,  712,  710,  709,  708,  706,  705,  704,  702,

      701,  700,  698,  697,  696,  694,  693,  692,  690,  689,
      688,  686,  685,  684,  682,  681,  680,  677,  676,  674,
      672,  671,  670,  669,  668,  666,  665,  664,  663,  662,
      660,  659,  658,  657,  656,  654,  653,  652,  651,  650,
      648,  647,  646,  645,  644,  642,  641,  640,  639,  638,
      636,  635,  634,  633,  632,  631,  630,  628,  627,  626,
      624,  623,  622,  621,  617,  616,  615,  613,  612,  609,
      608,  607,  606,  605,  604,  601,  600,  599,  598,  597,
      596,  593,  592,  591,  590,  589,  588,  585,  584,  583,
      582,  581,  580,  577,  576,  575,  574,  573,  572,  569,

      568,  567,  566,  565,  564,  560,  559,  558,  557,  556,
      555,  551,  550,  549,  548,  547,  546,  544,  541,  540,
      539,  538,  537,  536,  534,  531,  530,  529,  528,  527,
      526,  525,  524,  521,  520,  519,  518,  517,  516,  515,
      513,  510,  509,  508,  507,  506,  505,  504,  501,  498,
      497,  496,  495,  494,  493,  492,  491,  489,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  456,
      455,  453,  452,  451,  450,  449,  448,  447,  446,  443,
      440,  439,  436,  435,  434,  433,  432,  431,  430,  429,

      428,  427,  426,  423,  422,  420,  415,  414,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  401,  400,  395,
      394,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  378,  377,  376,  374,  373,  371,  370,  368,
      367,  366,  365,  364,  363,  362,  361,  360,  358,  357,
      356,  353,  352,  351,  343,  342,  341,  340,  339,  338,
      337,  336,  334,  333,  331,  330,  328,  327,  326,  323,
      322,  321,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  302,  301,  299,  297,  296,  295,  294,  293,  290,
      289,  288,  287,  285,  280,  278,  277,  276,  275,  274,

      273,  272,  271,  270,  269,  268,  267,  266,  264,  263,
      262,  261,  260,  257,  256,  255,  251,  249,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  224,  223,  222,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  194,  191,
      181,  177,  171,  170,  169,  163,  152,  151,  149,  148,
      146,  145,  144,  142,  141,  139,  133,  130,  129,  128,
      127,  126,  125,  124,  123,  122,  121,  120,  108,  105,
      100,   96,   93,   82,   81,   80,   79,   78,   76,   75,

       74,   73,   70,   69,   67,   65,   63,   62,   60,   59,
       58,   57,   56,   55,   54,   53,   52,   50,   45,   38,
       37,   36,   35,   24,   23,   16,   15,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852
    } ;

static yyconst short int yy_rule_linenum[61] =
    {   0,
      151,  160,  168,  176,  184,  190,  195,  200,  207,  213,
      218,  225,  231,  236,  243,  251,  258,  264,  271,  277,
      283,  290,  295,  302,  310,  319,  324,  332,  339,  345,
      351,  357,  363,  369,  375,  381,  387,  393,  398,  405,
      411,  416,  420,  427,  433,  439,  445,  452,  458,  464,
      471,  477,  484,  495,  501,  506,  518,  530,  535,  541
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
#define INITIAL 0
/* TortoiseCVS - a Windows shell extension for easy version control

// Copyright (C) 2004 - Hartmut Honisch
// <Hartmut_Honisch@web.de> - April 2004

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/
/****************************/
/* Lexer for cvs log output */
/****************************/
#line 26 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
/* Headers */
#include "bison_parser.hpp"

#include <iostream>


// This is a bugfix class - flex forgets to free its stack memory
class TortoiseLexer : public yyFlexLexer
{
public:
   TortoiseLexer(std::istream* arg_yyin = 0, std::ostream* arg_yyout = 0)
      : yyFlexLexer(arg_yyin, arg_yyout) { }

   ~TortoiseLexer() 
   { 
      if (yy_start_stack)
	  {
	     yy_flex_free(yy_start_stack); 
		 yy_start_stack = 0;
	  }
   }

   int yylex();
};


using namespace std;
/***********/
/* Options */
/***********/
/* Don't use yywrap */
/* Enable start condition stack */
#define YY_STACK_USED 1
/* No interactive scanning */
#define YY_NEVER_INTERACTIVE 1
/* Rename class to avoid name clashing */
/* Don't include the default rule */
/* Derive from my subclass */
/********************/
/* Start conditions */
/********************/
/* When reading the header part */
#define HEADER 1
 
#define HEADER_LOCKS 2

#define HEADER_ACCESS 3

#define HEADER_SYMBOLIC 4

#define HEADER_TOTAL_REVS 5

#define HEADER_DESCRIPTION 6

/* When reading a revision */
#define REVISION 7

#define REVISION_DATE 8

#define REVISION_LOCKED_BY 9
 
#define REVISION_OPTIONS 10

#define REVISION_BRANCHES 11
 
#define REVISION_BRANCH_ITEMS 12

#define REVISION_COMMENT 13

/* Read string up to various delimiters */
#define STR_TO_EOL 14

#define SKIP_TO_EOL 15
 
#define STR_TO_WS 16
 
/* When reading an item of type "name: revision" followed by '\n' */
#define NAME_REV_ITEM 17

#define NAME_REV_COLON 18

#define NAME_REV_REV 19

/* When reading a list item followed by '\n' */
#define LIST_ITEM 20

/* When reading a key value, i.e. the value in ("key: value") followed by ';' or '\n' */
#define KEY_VALUE 21

/***************/
/* Definitions */
/***************/
/* Whitespace. */
/* No whitespace. */
/* Whitespace without a newline character */
/* Newline character */
/* No newline character */
/* Revision separator */
/* Node separator */
#line 1143 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../build/vc9Win32/cvstree/flex_lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 148 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"


   /* Skip whitespace at the beginning of the log */
#line 1274 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../build/vc9Win32/cvstree/flex_lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 853 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1428 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 61 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 61 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 62 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 151 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{ 
      BEGIN(HEADER);
      yy_push_state(STR_TO_EOL);
      return TOK_RCS_FILE;
   }
	YY_BREAK
/* Read "Working file" */
case 2:
YY_RULE_SETUP
#line 160 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(STR_TO_EOL);
      return TOK_WORKING_FILE;
   }
	YY_BREAK
/* Read "head" */
case 3:
YY_RULE_SETUP
#line 168 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(STR_TO_EOL);
      return TOK_HEAD_REV;
   }
	YY_BREAK
/* Read "branch" */
case 4:
YY_RULE_SETUP
#line 176 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(STR_TO_EOL);
      return TOK_BRANCH_REV;
   }
	YY_BREAK
/* Read "locks" */
case 5:
YY_RULE_SETUP
#line 184 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(HEADER_LOCKS);
      return TOK_LOCKS;
   }
	YY_BREAK
/* Read "strict" */
case 6:
YY_RULE_SETUP
#line 190 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_STRICT;
   }
	YY_BREAK
/* Read locks list item */
case 7:
YY_RULE_SETUP
#line 195 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(NAME_REV_ITEM);
   }
	YY_BREAK
/* End of locks list */
case 8:
YY_RULE_SETUP
#line 200 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(HEADER);
   }
	YY_BREAK
/* Read "access list" */
case 9:
YY_RULE_SETUP
#line 207 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(HEADER_ACCESS);
      return TOK_ACCESS_LIST;
   }
	YY_BREAK
/* Read access list item */
case 10:
YY_RULE_SETUP
#line 213 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(LIST_ITEM);
   }
	YY_BREAK
/* End of access list */
case 11:
YY_RULE_SETUP
#line 218 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(HEADER);
   }
	YY_BREAK
/* Read "symbolic names" */
case 12:
YY_RULE_SETUP
#line 225 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(HEADER_SYMBOLIC);
      return TOK_SYMBOLIC_NAMES;
   }
	YY_BREAK
/* Read symbolic list item */
case 13:
YY_RULE_SETUP
#line 231 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(NAME_REV_ITEM);
   }
	YY_BREAK
/* End of symbolic list */
case 14:
YY_RULE_SETUP
#line 236 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(HEADER);
   }
	YY_BREAK
/* Read "keyword substitution:" */
case 15:
YY_RULE_SETUP
#line 243 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(STR_TO_EOL);
      return TOK_KEYWORD_SUBST;
   }
	YY_BREAK
/* Read "total revisions:" */
case 16:
YY_RULE_SETUP
#line 251 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(HEADER_TOTAL_REVS);
      yy_push_state(KEY_VALUE);
      return TOK_TOTAL_REVS;
   }
	YY_BREAK
/* Read "selected revisions:" */
case 17:
YY_RULE_SETUP
#line 258 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_SELECTED_REVS;
   }
	YY_BREAK
/* End if "total revisions" */
case 18:
YY_RULE_SETUP
#line 264 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(HEADER);
   }
	YY_BREAK
/* Read "description:" */
case 19:
YY_RULE_SETUP
#line 271 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(HEADER_DESCRIPTION);
      return TOK_DESCRIPTION;
   }
	YY_BREAK
/* Read revision separator => Start reading revision */
case 20:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 277 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
      BEGIN(REVISION);
   }
	YY_BREAK
/* Read node separator => Finished node */
case 21:
YY_RULE_SETUP
#line 283 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
      BEGIN(INITIAL);
      return TOK_EON;
   }
	YY_BREAK
/* Read description line */
case 22:
YY_RULE_SETUP
#line 290 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_STRING;
   }
	YY_BREAK
/* Read description line break */
case 23:
YY_RULE_SETUP
#line 295 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_EOL;
   }
	YY_BREAK
/* Read unknown header line */
case 24:
YY_RULE_SETUP
#line 302 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(SKIP_TO_EOL);
      ECHO;
   }
	YY_BREAK
/* Revision starts */
case 25:
YY_RULE_SETUP
#line 310 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(REVISION_LOCKED_BY);
      yy_push_state(STR_TO_WS);
      return TOK_REVISION;
   }
	YY_BREAK
/* Read empty "locked by:" */
case 26:
YY_RULE_SETUP
#line 319 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(REVISION_OPTIONS);
   }
	YY_BREAK
/* Read "locked by:" */
case 27:
YY_RULE_SETUP
#line 324 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_LOCKED_BY;
   }
	YY_BREAK
/* Read "date:" */
case 28:
YY_RULE_SETUP
#line 332 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(REVISION_OPTIONS);
      yy_push_state(KEY_VALUE);
      return TOK_DATE;
   }
	YY_BREAK
/* Read "author:" */
case 29:
YY_RULE_SETUP
#line 339 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_AUTHOR;
   }
	YY_BREAK
/* Read "state:" */
case 30:
YY_RULE_SETUP
#line 345 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_STATE;
   }
	YY_BREAK
/* Read "lines:" */
case 31:
YY_RULE_SETUP
#line 351 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_LINES;
   }
	YY_BREAK
/* Read "kopt:" */
case 32:
YY_RULE_SETUP
#line 357 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_KOPT;
   }
	YY_BREAK
/* Read "commitid:" */
case 33:
YY_RULE_SETUP
#line 363 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_COMMITID;
   }
	YY_BREAK
/* Read "filename:" */
case 34:
YY_RULE_SETUP
#line 369 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_FILENAME;
   }
	YY_BREAK
/* Read "mergepoint:" */
case 35:
YY_RULE_SETUP
#line 375 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_MERGEPOINT;
   }
	YY_BREAK
/* Read "bugid:" */
case 36:
YY_RULE_SETUP
#line 381 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_BUGNUMBER;
   }
	YY_BREAK
/* Read unknown option */
case 37:
YY_RULE_SETUP
#line 387 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_push_state(KEY_VALUE);
      return TOK_UNKNOWN;
   }
	YY_BREAK
/* End of options */
case 38:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 393 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(REVISION_BRANCHES);
   }
	YY_BREAK
/* End of options */
case 39:
YY_RULE_SETUP
#line 398 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(REVISION_COMMENT);
   }
	YY_BREAK
/* Read "branches: " */
case 40:
YY_RULE_SETUP
#line 405 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(REVISION_BRANCH_ITEMS);
      return TOK_BRANCHES;
   }
	YY_BREAK
/* Read branch */
case 41:
YY_RULE_SETUP
#line 411 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_STRING;
   }
	YY_BREAK
/* Read delimiter */
case 42:
YY_RULE_SETUP
#line 416 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
   }
	YY_BREAK
/* End of branches */
case 43:
YY_RULE_SETUP
#line 420 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(REVISION_COMMENT);
   }	
	YY_BREAK
/* Read revision comment */
case 44:
YY_RULE_SETUP
#line 427 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_COMMENT;
   }
	YY_BREAK
/* Read revision comment */
case 45:
YY_RULE_SETUP
#line 433 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_EOL;
   }
	YY_BREAK
/* Read revision comment */
case 46:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 439 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(REVISION);
   }
	YY_BREAK
/* Read revision comment */
case 47:
YY_RULE_SETUP
#line 445 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(INITIAL);
      return TOK_EON;
   }
	YY_BREAK
/* Read string up to next newline */
case 48:
YY_RULE_SETUP
#line 452 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_STRING;
   }
	YY_BREAK
/* Read newline */
case 49:
YY_RULE_SETUP
#line 458 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
   }
	YY_BREAK
/* Skip to end of line */
case 50:
YY_RULE_SETUP
#line 464 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
      ECHO;
   }
	YY_BREAK
/* Read string up to whitespace */
case 51:
YY_RULE_SETUP
#line 471 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_STRING;
   }
	YY_BREAK
/* Read string up to whitespace */
case 52:
YY_RULE_SETUP
#line 477 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
      return TOK_STRING;
   }
	YY_BREAK
/* Read whitespace after string*/
case 53:
YY_RULE_SETUP
#line 484 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
   }
	YY_BREAK
/*************************************************************/
/* Reading an item of type "name: revision" followed by '\n' */
/*************************************************************/
/* Read name */
case 54:
YY_RULE_SETUP
#line 495 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(NAME_REV_COLON);
      return TOK_STRING;
   }
	YY_BREAK
/* Read delimiting colon */
case 55:
YY_RULE_SETUP
#line 501 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      BEGIN(NAME_REV_REV);
   }
	YY_BREAK
/* Read revision */
case 56:
YY_RULE_SETUP
#line 506 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
      return TOK_STRING;
   }
	YY_BREAK
/****************************************/
/* Reading a list item followed by '\n' */
/****************************************/
/* Read item */
case 57:
YY_RULE_SETUP
#line 518 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
      return TOK_STRING;
   }
	YY_BREAK
/*********************************************************************************/
/* Reading a key value, i.e. the value in ("key: value") followed by ';' or '\n' */
/*********************************************************************************/
/* Read value followed by delimiter */
case 58:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 530 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      return TOK_STRING;
   }
	YY_BREAK
/* Read value followed by newline */
case 59:
YY_RULE_SETUP
#line 535 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
      return TOK_STRING;
   }
	YY_BREAK
/* Read semicolon delimiter */
case 60:
YY_RULE_SETUP
#line 541 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
{
      yy_pop_state();
   }
	YY_BREAK
/* Ignore unknown input    
<*>. {
      printf("x");
   }
<*>{NL} {
      printf("\n");
   }
*/
case 61:
YY_RULE_SETUP
#line 556 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1943 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../build/vc9Win32/cvstree/flex_lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(HEADER):
			case YY_STATE_EOF(HEADER_LOCKS):
			case YY_STATE_EOF(HEADER_ACCESS):
			case YY_STATE_EOF(HEADER_SYMBOLIC):
			case YY_STATE_EOF(HEADER_TOTAL_REVS):
			case YY_STATE_EOF(HEADER_DESCRIPTION):
			case YY_STATE_EOF(REVISION):
			case YY_STATE_EOF(REVISION_DATE):
			case YY_STATE_EOF(REVISION_LOCKED_BY):
			case YY_STATE_EOF(REVISION_OPTIONS):
			case YY_STATE_EOF(REVISION_BRANCHES):
			case YY_STATE_EOF(REVISION_BRANCH_ITEMS):
			case YY_STATE_EOF(REVISION_COMMENT):
			case YY_STATE_EOF(STR_TO_EOL):
			case YY_STATE_EOF(SKIP_TO_EOL):
			case YY_STATE_EOF(STR_TO_WS):
			case YY_STATE_EOF(NAME_REV_ITEM):
			case YY_STATE_EOF(NAME_REV_COLON):
			case YY_STATE_EOF(NAME_REV_REV):
			case YY_STATE_EOF(LIST_ITEM):
			case YY_STATE_EOF(KEY_VALUE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 853 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 853 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 852);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 556 "C:\\Users\\Marvin\\Git\\G-CVSNT\\cvsnt\\tortoiseCVS\\TortoiseCVS\\build\\vc9Win32\\../../src/cvstree/lexer.ll"



// Create the lexer
FlexLexer* CreateCvsLogLexer(std::istream *in, std::ostream *out)
{
   return new TortoiseLexer(in, out);
}
